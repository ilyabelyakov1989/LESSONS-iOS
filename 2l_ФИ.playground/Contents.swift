import UIKit

//1. Написать функцию, которая определяет, четное число или нет.

//2. Написать функцию, которая определяет, делится ли число без остатка на 3.

//3. Создать возрастающий массив из 100 чисел.

//4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.

var numbers = Array(1...100)
print("В массиве \(numbers.count) элементов")

func evenNumbers (_ number: Int) -> Bool {
    if number % 2 == 0 {
        return true
    } else {
        return false
    }
}

for number in numbers {
    if evenNumbers(number) {
        print("Это четное число: \(number)")
    } else {
        print("Это нечетное число \(number)")
    }
}

func isDevThree (_ numberDevThree: Int) -> Bool {
    if numberDevThree % 3 == 0 {
        return true
    } else {
        return false
    }
}

for numberDevThree in numbers {
    if isDevThree(numberDevThree) {
        print("\(numberDevThree) делится на 3")
    } else {
        print("\(numberDevThree) не делится на 3")
    }
}

for (_, value) in numbers.enumerated() {
    if (value % 2) == 0 || (value % 3) != 0 {
        numbers.remove(at: numbers.firstIndex(of: value)!)
    }
}
print ("Измененный массив: \(numbers)")



/*5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов.

Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2.
6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу. Для нахождения всех простых чисел не больше заданного числа n, следуя методу Эратосфена, нужно выполнить следующие шаги:

a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
b. Пусть переменная p изначально равна двум — первому простому числу.
c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
e. Повторять шаги c и d, пока возможно. */

//Тяжко для понимания!!!
